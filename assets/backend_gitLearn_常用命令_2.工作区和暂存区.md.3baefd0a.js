import{_ as e,c as i,o as c,d as t}from"./app.dd808e9e.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、工作区","slug":"一、工作区","link":"#一、工作区","children":[]},{"level":2,"title":"二、暂存区","slug":"二、暂存区","link":"#二、暂存区","children":[]}],"relativePath":"backend/gitLearn/常用命令/2.工作区和暂存区.md"}'),d={name:"backend/gitLearn/常用命令/2.工作区和暂存区.md"},l=t('<h2 id="一、工作区" tabindex="-1">一、工作区 <a class="header-anchor" href="#一、工作区" aria-hidden="true">#</a></h2><p>工作区就是咱们的工作目录，肉眼可见</p><p>git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件</p><ol><li><code>git clean -n</code> 是一次 clean 的演习, 告诉你哪些文件会被删除，并不会真正删除</li><li><code>git clean -f</code> 删除当前目录下没有 tracked 过的文件，不会删除.gitignore 指定的文件</li><li><code>git clean -df</code> 删除当前目录下没有被 tracked 过的文件和文件夹</li><li><code>git checkout .</code> 将放入到暂存区的所有文件恢复</li><li><code>git checkout hd.js</code> 放弃指定文件的修改</li><li><code>git checkout -- hd.js</code> 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近版本）</li></ol><h2 id="二、暂存区" tabindex="-1">二、暂存区 <a class="header-anchor" href="#二、暂存区" aria-hidden="true">#</a></h2><p>暂存区相当于我们本地的临时仓库，所有提交记录都在里面</p><ol><li><code>git add .</code> 提交所有修改和新增的文件</li><li><code>git add -u</code> 只提交修改文件不提交新文件</li><li><code>git ls-files -s</code> 查看暂存区文件列表</li><li><code>git cat-file -p 6e9a94</code> 查看暂存区文件内容</li><li><code>git reset</code> 撤销上次提交到暂存区动作</li></ol>',7),a=[l];function o(n,r,_,s,h,g){return c(),i("div",null,a)}const u=e(d,[["render",o]]);export{f as __pageData,u as default};
